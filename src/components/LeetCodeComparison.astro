---
import { getCollection } from 'astro:content';

// Get all markdown files from the leetcode directory
const leetcodeEntries = await getCollection('docs', ({ slug }) => {
  return slug && slug.startsWith('leetcode/') && slug !== 'leetcode/index';
});

// Create solution mapping for dropdowns
const solutions = leetcodeEntries.map(entry => ({
  slug: entry.slug,
  title: entry.data.title || entry.slug.replace('leetcode/', '').replace(/[-_]/g, ' ').replace(/\b\w/g, l => l.toUpperCase()),
  filename: entry.slug.replace('leetcode/', '')
}));
---

<div class="leetcode-comparison">
  <div class="comparison-controls">
    <div class="editor-control">
      <label for="left-select">Left Solution:</label>
      <select id="left-select">
        {solutions.map((solution, index) => (
          <option value={solution.slug} selected={index === 0}>
            {solution.title}
          </option>
        ))}
      </select>
    </div>
    
    <div class="editor-control">
      <label for="right-select">Right Solution:</label>
      <select id="right-select">
        {solutions.map((solution, index) => (
          <option value={solution.slug} selected={index === 1}>
            {solution.title}
          </option>
        ))}
      </select>
    </div>
  </div>

  <div class="editors-container">
    <div class="editor-panel">
      <div id="left-content" class="starlight-content"></div>
    </div>
    <div class="editor-panel">
      <div id="right-content" class="starlight-content"></div>
    </div>
  </div>
</div>

<script define:vars={{ solutions }}>
  async function fetchMarkdownContent(slug) {
    try {
      const response = await fetch(`/${slug}/`);
      if (!response.ok) {
        throw new Error(`Failed to fetch ${slug}`);
      }
      const html = await response.text();
      
      // Parse the HTML and extract the main content
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const mainContent = doc.querySelector('main .sl-markdown-content');
      
      return mainContent ? mainContent.innerHTML : '<p>Content not found</p>';
    } catch (error) {
      console.error('Error fetching content:', error);
      return `<p>Error loading content for ${slug}</p>`;
    }
  }

  async function updateContentPanel(panelId, slug) {
    const panel = document.getElementById(panelId);
    if (!panel) return;
    
    // Show loading state
    panel.innerHTML = '<div class="loading">Loading...</div>';
    
    // Fetch and display content
    const content = await fetchMarkdownContent(slug);
    panel.innerHTML = content;
  }

  async function initializeComparison() {
    const leftSelect = document.getElementById('left-select');
    const rightSelect = document.getElementById('right-select');
    
    // Initialize with default selections
    if (leftSelect.value) {
      await updateContentPanel('left-content', leftSelect.value);
    }
    if (rightSelect.value) {
      await updateContentPanel('right-content', rightSelect.value);
    }
    
    // Add event listeners
    leftSelect.addEventListener('change', async (e) => {
      await updateContentPanel('left-content', e.target.value);
    });
    
    rightSelect.addEventListener('change', async (e) => {
      await updateContentPanel('right-content', e.target.value);
    });
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeComparison);
  } else {
    initializeComparison();
  }
</script>

<style>
  .leetcode-comparison {
    width: 100%;
    height: 100vh;
    display: flex;
    flex-direction: column;
  }

  .comparison-controls {
    display: flex;
    justify-content: space-between;
    padding: 1rem;
    background: var(--sl-color-bg-nav);
    border-bottom: 1px solid var(--sl-color-hairline);
    gap: 2rem;
    flex-shrink: 0;
  }

  .editor-control {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .editor-control label {
    font-weight: 500;
    color: var(--sl-color-text);
  }

  .editor-control select {
    padding: 0.5rem;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.25rem;
    background: var(--sl-color-bg);
    color: var(--sl-color-text);
    min-width: 200px;
  }

  .editors-container {
    display: flex;
    flex: 1;
    overflow: hidden;
  }

  .editor-panel {
    flex: 1;
    overflow: auto;
    border-right: 1px solid var(--sl-color-hairline);
  }

  .editor-panel:last-child {
    border-right: none;
  }

  .starlight-content {
    padding: 1rem;
    height: 100%;
    overflow: auto;
  }

  /* Inherit Starlight markdown styling */
  .starlight-content h1,
  .starlight-content h2,
  .starlight-content h3,
  .starlight-content h4,
  .starlight-content h5,
  .starlight-content h6 {
    color: var(--sl-color-white);
    font-weight: 600;
    line-height: var(--sl-line-height-headings);
    margin-bottom: 1rem;
  }

  .starlight-content h1 {
    font-size: var(--sl-text-h1);
  }

  .starlight-content h2 {
    font-size: var(--sl-text-h2);
  }

  .starlight-content h3 {
    font-size: var(--sl-text-h3);
  }

  .starlight-content p {
    color: var(--sl-color-gray-1);
    margin-bottom: 1rem;
  }

  .starlight-content ul,
  .starlight-content ol {
    color: var(--sl-color-gray-1);
    margin-bottom: 1rem;
    padding-left: 1.5rem;
  }

  .starlight-content li {
    margin-bottom: 0.5rem;
  }

  .starlight-content code {
    background: var(--sl-color-bg-code);
    color: var(--sl-color-text-code);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: var(--sl-font-mono);
    font-size: 0.875em;
  }

  .starlight-content pre {
    background: var(--sl-color-bg-code);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin-bottom: 1rem;
  }

  .starlight-content pre code {
    background: none;
    padding: 0;
  }

  .starlight-content blockquote {
    border-left: 4px solid var(--sl-color-accent);
    padding-left: 1rem;
    margin: 1rem 0;
    color: var(--sl-color-gray-2);
    font-style: italic;
  }

  .loading {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 100px;
    color: var(--sl-color-gray-3);
    font-style: italic;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .comparison-controls {
      flex-direction: column;
      gap: 1rem;
    }
    
    .editors-container {
      flex-direction: column;
    }
    
    .editor-panel {
      border-right: none;
      border-bottom: 1px solid var(--sl-color-hairline);
    }
    
    .editor-panel:last-child {
      border-bottom: none;
    }
  }
</style>