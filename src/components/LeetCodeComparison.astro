---
import { getCollection } from 'astro:content';

// Get all entries from docs collection
const allDocs = await getCollection('docs');

// Filter for leetcode entries, excluding the index
const leetcodeEntries = allDocs.filter(entry => 
  entry.id.startsWith('leetcode/') && 
  entry.id !== 'leetcode/index.mdx' &&
  entry.id !== 'leetcode'
);

// Create solution mapping for dropdowns
const solutions = leetcodeEntries.map(entry => {
  let title = entry.data.title || entry.id.replace('leetcode/', '').replace(/[-_]/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
  
  return {
    slug: entry.id,
    title: title,
    filename: entry.id.replace('leetcode/', '')
  };
}).sort((a, b) => {
  // Sort alphabetically by title
  return a.title.localeCompare(b.title, undefined, { sensitivity: 'base' });
});
---

<div class="leetcode-comparison">
  <!-- Sidebar Toggle Button -->
  <button id="sidebar-toggle" class="sidebar-toggle" title="Toggle Sidebar">
    <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
      <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
    </svg>
  </button>

  <!-- Panel Dropdowns -->
  <div class="left-panel-dropdown">
    <select id="left-select">
      {solutions.length > 0 ? solutions.map((solution, index) => (
        <option value={solution.slug} selected={index === 0}>
          {solution.title}
        </option>
      )) : (
        <option value="">No solutions found</option>
      )}
    </select>
  </div>

  <div class="right-panel-dropdown">
    <select id="right-select">
      {solutions.length > 0 ? solutions.map((solution, index) => (
        <option value={solution.slug} selected={index === 1 || (solutions.length === 1 && index === 0)}>
          {solution.title}
        </option>
      )) : (
        <option value="">No solutions found</option>
      )}
    </select>
  </div>

  <!-- Main Content Area -->
  <div class="editors-container">
    <div class="editor-panel">
      <div id="left-content" class="starlight-content"></div>
    </div>
    <div class="editor-panel">
      <div id="right-content" class="starlight-content"></div>
    </div>
  </div>
</div>

<script define:vars={{ solutions }}>
  async function fetchMarkdownContent(slug) {
    try {
      const response = await fetch(`/${slug}/`);
      if (!response.ok) {
        throw new Error(`Failed to fetch ${slug}`);
      }
      const html = await response.text();
      
      // Parse the HTML and extract the main content
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const mainContent = doc.querySelector('main .sl-markdown-content');
      
      return mainContent ? mainContent.innerHTML : '<p>Content not found</p>';
    } catch (error) {
      console.error('Error fetching content:', error);
      return `<p>Error loading content for ${slug}</p>`;
    }
  }

  async function updateContentPanel(panelId, slug) {
    const panel = document.getElementById(panelId);
    if (!panel) return;
    
    // Show loading state
    panel.innerHTML = '<div class="loading">Loading...</div>';
    
    // Fetch and display content
    const content = await fetchMarkdownContent(slug);
    panel.innerHTML = content;
  }

  function initializeFullscreenMode() {
    // Hide Starlight sidebar, header, and table of contents on load
    const sidebar = document.querySelector('.sidebar-pane');
    const header = document.querySelector('.header');
    const main = document.querySelector('main');
    
    // Hide all possible right sidebar elements
    const rightSidebarSelectors = [
      '.right-sidebar',
      '.right-sidebar-panel', 
      '.right-sidebar-container',
      '[data-right-sidebar]',
      '.sl-toc-wrapper',
      'aside[aria-labelledby="starlight__on-this-page"]'
    ];
    
    rightSidebarSelectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      elements.forEach(el => el.style.display = 'none');
    });
    
    if (sidebar) sidebar.style.display = 'none';
    if (header) header.style.display = 'none';
    if (main) {
      main.style.marginInlineStart = '0';
      main.style.paddingTop = '0';
      main.style.marginInlineEnd = '0';
    }
  }

  function addCloseButtonToSidebar() {
    const sidebar = document.querySelector('.sidebar-pane');
    if (sidebar && !sidebar.querySelector('.close-sidebar-btn')) {
      const closeBtn = document.createElement('button');
      closeBtn.className = 'close-sidebar-btn';
      closeBtn.innerHTML = 'Ã—';
      closeBtn.title = 'Close Sidebar';
      closeBtn.addEventListener('click', toggleSidebar);
      sidebar.prepend(closeBtn);
    }
  }

  function toggleSidebar() {
    const sidebar = document.querySelector('.sidebar-pane');
    const header = document.querySelector('.header');
    const toc = document.querySelector('.right-sidebar-panel');
    const main = document.querySelector('main');
    
    if (sidebar && header) {
      const isHidden = sidebar.style.display === 'none';
      
      if (isHidden) {
        sidebar.style.display = '';
        header.style.display = '';
        if (main) {
          main.style.marginInlineStart = '';
          main.style.paddingTop = '';
          main.style.marginInlineEnd = '';
        }
        addCloseButtonToSidebar();
      } else {
        sidebar.style.display = 'none';
        header.style.display = 'none';
        if (toc) toc.style.display = 'none';
        if (main) {
          main.style.marginInlineStart = '0';
          main.style.paddingTop = '0';
          main.style.marginInlineEnd = '0';
        }
      }
    }
  }

  async function initializeComparison() {
    const leftSelect = document.getElementById('left-select');
    const rightSelect = document.getElementById('right-select');
    const sidebarToggle = document.getElementById('sidebar-toggle');
    
    // Initialize fullscreen mode
    initializeFullscreenMode();
    
    // Initialize with default selections
    if (leftSelect.value) {
      await updateContentPanel('left-content', leftSelect.value);
    }
    if (rightSelect.value) {
      await updateContentPanel('right-content', rightSelect.value);
    }
    
    // Add dropdown event listeners
    leftSelect.addEventListener('change', async (e) => {
      await updateContentPanel('left-content', e.target.value);
    });
    
    rightSelect.addEventListener('change', async (e) => {
      await updateContentPanel('right-content', e.target.value);
    });

    // Add sidebar toggle listener
    sidebarToggle.addEventListener('click', toggleSidebar);
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeComparison);
  } else {
    initializeComparison();
  }
</script>

<style>
  /* Fullscreen layout */
  .leetcode-comparison {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: var(--sl-color-bg);
    z-index: 1000;
    display: flex;
    flex-direction: column;
  }

  /* Hide Starlight right sidebar completely */
  :global(.right-sidebar),
  :global(.right-sidebar-panel),
  :global(.right-sidebar-container),
  :global([data-right-sidebar]),
  :global(.sl-toc-wrapper),
  :global(aside[aria-labelledby="starlight__on-this-page"]),
  :global(.starlight-toc),
  :global(.toc-wrapper) {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
    width: 0 !important;
    height: 0 !important;
    overflow: hidden !important;
  }

  /* Ensure main content takes full width without right sidebar space */
  :global(main) {
    margin-inline-end: 0 !important;
    padding-inline-end: 0 !important;
  }

  /* Sidebar Toggle Button */
  .sidebar-toggle {
    position: fixed;
    top: 1rem;
    left: 1rem;
    z-index: 1002;
    background: var(--sl-color-bg-nav);
    border: 1px solid var(--sl-color-hairline);
    border-radius: 0.5rem;
    padding: 0.75rem;
    color: var(--sl-color-text);
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .sidebar-toggle:hover {
    background: var(--sl-color-bg-sidebar);
    transform: translateY(-1px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  /* Panel Dropdowns */
  .left-panel-dropdown {
    position: fixed;
    top: 1rem;
    left: calc(25% - 100px);
    z-index: 1002;
    background: var(--sl-color-bg-nav);
    padding: 0.75rem;
    border-radius: 0.5rem;
    border: 1px solid var(--sl-color-hairline);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    backdrop-filter: blur(8px);
  }

  .right-panel-dropdown {
    position: fixed;
    top: 1rem;
    right: calc(25% - 100px);
    z-index: 1002;
    background: var(--sl-color-bg-nav);
    padding: 0.75rem;
    border-radius: 0.5rem;
    border: 1px solid var(--sl-color-hairline);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
    backdrop-filter: blur(8px);
  }

  .left-panel-dropdown select,
  .right-panel-dropdown select {
    padding: 0.75rem;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    background: var(--sl-color-bg);
    color: var(--sl-color-text);
    font-size: 0.875rem;
    transition: all 0.2s ease;
    cursor: pointer;
    min-width: 200px;
  }

  .left-panel-dropdown select:hover,
  .right-panel-dropdown select:hover {
    border-color: var(--sl-color-accent);
  }

  .left-panel-dropdown select:focus,
  .right-panel-dropdown select:focus {
    outline: none;
    border-color: var(--sl-color-accent);
    box-shadow: 0 0 0 3px rgba(var(--sl-color-accent-rgb), 0.1);
  }

  /* Close button for sidebar */
  .close-sidebar-btn {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background: var(--sl-color-bg-nav);
    border: 1px solid var(--sl-color-hairline);
    border-radius: 50%;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 20px;
    line-height: 1;
    color: var(--sl-color-text);
    z-index: 1003;
    transition: all 0.2s ease;
  }

  .close-sidebar-btn:hover {
    background: var(--sl-color-accent);
    color: white;
    transform: scale(1.1);
  }

  /* Main Content Area */
  .editors-container {
    display: flex;
    flex: 1;
    height: 100vh;
    overflow: hidden;
  }

  .editor-panel {
    flex: 1;
    overflow: auto;
    border-right: 1px solid var(--sl-color-hairline);
    background: var(--sl-color-bg);
  }

  .editor-panel:last-child {
    border-right: none;
  }

  .starlight-content {
    padding: 4rem 2rem 2rem 2rem; /* Top padding to account for panel dropdowns */
    height: 100%;
    overflow: auto;
    box-sizing: border-box;
  }

  /* Enhanced Starlight markdown styling */
  .starlight-content h1,
  .starlight-content h2,
  .starlight-content h3,
  .starlight-content h4,
  .starlight-content h5,
  .starlight-content h6 {
    color: var(--sl-color-white);
    font-weight: 600;
    line-height: var(--sl-line-height-headings);
    margin-bottom: 1rem;
  }

  .starlight-content h1 {
    font-size: var(--sl-text-h1);
    border-bottom: 2px solid var(--sl-color-accent);
    padding-bottom: 0.5rem;
  }

  .starlight-content h2 {
    font-size: var(--sl-text-h2);
    margin-top: 2rem;
  }

  .starlight-content h3 {
    font-size: var(--sl-text-h3);
  }

  .starlight-content p {
    color: var(--sl-color-gray-1);
    margin-bottom: 1rem;
    line-height: 1.7;
  }

  .starlight-content ul,
  .starlight-content ol {
    color: var(--sl-color-gray-1);
    margin-bottom: 1rem;
    padding-left: 1.5rem;
    line-height: 1.6;
  }

  .starlight-content li {
    margin-bottom: 0.75rem;
  }

  .starlight-content li strong {
    color: var(--sl-color-white);
  }

  .starlight-content code {
    background: var(--sl-color-bg-code);
    color: var(--sl-color-text-code);
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
    font-family: var(--sl-font-mono);
    font-size: 0.875em;
    border: 1px solid var(--sl-color-hairline-shade);
  }

  .starlight-content pre {
    background: var(--sl-color-bg-code);
    padding: 1.5rem;
    border-radius: 0.75rem;
    overflow-x: auto;
    margin: 1.5rem 0;
    border: 1px solid var(--sl-color-hairline-shade);
  }

  .starlight-content pre code {
    background: none;
    padding: 0;
    border: none;
  }

  .starlight-content blockquote {
    border-left: 4px solid var(--sl-color-accent);
    padding-left: 1.5rem;
    margin: 1.5rem 0;
    color: var(--sl-color-gray-2);
    font-style: italic;
    background: var(--sl-color-bg-sidebar);
    padding: 1rem 1.5rem;
    border-radius: 0 0.5rem 0.5rem 0;
  }

  .loading {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 200px;
    color: var(--sl-color-gray-3);
    font-style: italic;
    font-size: 1.1rem;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .left-panel-dropdown {
      top: 1rem;
      left: 0.5rem;
      right: auto;
    }
    
    .right-panel-dropdown {
      top: 5rem;
      right: 0.5rem;
      left: auto;
    }
    
    .left-panel-dropdown select,
    .right-panel-dropdown select {
      min-width: calc(50vw - 2rem);
    }
    
    .sidebar-toggle {
      top: 0.5rem;
      left: 0.5rem;
      padding: 0.5rem;
      z-index: 1003;
    }
    
    .editors-container {
      flex-direction: column;
    }
    
    .editor-panel {
      border-right: none;
      border-bottom: 1px solid var(--sl-color-hairline);
      min-height: 50vh;
    }
    
    .editor-panel:last-child {
      border-bottom: none;
    }

    .starlight-content {
      padding: 8rem 1rem 2rem 1rem;
    }
  }

  /* Smooth transitions */
  * {
    transition: border-color 0.2s ease, box-shadow 0.2s ease;
  }
</style>